include
<
stdio
.
h
>
include
<
string
.
h
>
include
<
string
>
include
<
iostream
>
include
<
iomanip
>
include
<
stdlib
.
h
>
include
<
ctype
.
h
>
include
<
map
>
include
<
set
>
int
main
(
)
{
std
:
:
pair
<
std
:
:
string
,
int
>
e
;
std
:
:
map
<
std
:
:
string
,
int
,
std
:
:
greater
<
std
:
:
string
>
>
l
;
int
t
=
0
;
int
s
=
0
;
int
d
=
0
;
int
c
=
0
;
int
n
=
0
;
int
lineCount
=
1
;
int
character
=
0
;
int
string
=
0
;
int
q
=
0
;
int
sControl
=
0
;
int
comment
=
0
;
int
ident
=
0
;
int
number
=
0
;
char
line
[
250
]
=
{
0
}
;
char
nextChar
;
char
lexeme
;
int
tokencount
;
char
specChar
[
]
=
{
'('
,
')'
,
','
,
'.'
,
':'
,
';'
,
'?'
,
'['
,
']'
,
'{'
,
'}'
,
'~'
,
'&'
,
'|'
,
'^'
,
'+'
,
'-'
,
'%'
,
'*'
,
'/'
,
'='
,
'!'
,
'>'
,
'<'
}
;
char
subSpecChar
[
]
=
{
'|'
,
'^'
,
'+'
,
'-'
,
'%'
,
'*'
,
'/'
,
'='
,
'!'
,
'>'
,
'<'
}
;
std
:
:
string
token
=
""
;
while
(
fgets
(
line
,
250
,
stdin
)
)
{
for
(
int
i
=
0
;
i
<
strlen
(
line
)
-
1
;
i
++
)
{
nextChar
=
line
[
i
]
;
if
(
nextChar
==
'/'
&&
line
[
i
+
1
]
==
'*'
||
comment
==
1
||
nextChar
==
'/'
&&
line
[
i
+
1
]
==
'/'
)
{
if
(
nextChar
==
'/'
&&
line
[
i
+
1
]
==
'/'
)
{
while
(
i
<
250
)
++
i
;
}
else
{
comment
=
1
;
token
.
clear
(
)
;
}
if
(
nextChar
==
'*'
&&
line
[
i
+
1
]
==
'/'
)
{
comment
=
0
;
++
i
;
}
}
else
if
(
nextChar
==
'"'
||
sControl
==
1
)
{
if
(
sControl
==
0
)
token
.
clear
(
)
;
sControl
=
0
;
token
+=
nextChar
;
++
i
;
nextChar
=
line
[
i
]
;
while
(
nextChar
!=
'"'
||
nextChar
==
'\n'
)
{
token
+=
nextChar
;
++
i
;
nextChar
=
line
[
i
]
;
}
if
(
nextChar
==
'\n'
)
{
sControl
=
1
;
break
;
}
token
+=
nextChar
;
std
:
:
cout
<<
token
<<
std
:
:
endl
;
l
[
"string"
]
++
;
}
else
if
(
nextChar
==
' '
||
nextChar
==
'\n'
||
nextChar
==
'\t'
||
nextChar
==
','
)
{
token
.
clear
(
)
;
}
else
if
(
isalpha
(
nextChar
)
||
nextChar
==
'_'
)
{
token
.
clear
(
)
;
while
(
isalpha
(
nextChar
)
||
isdigit
(
nextChar
)
||
nextChar
==
'_'
)
{
token
+=
nextChar
;
++
i
;
nextChar
=
line
[
i
]
;
}
std
:
:
cout
<<
token
<<
std
:
:
endl
;
l
[
"ident"
]
++
;
if
(
!
isalpha
(
nextChar
)
||
!
isdigit
(
nextChar
)
||
nextChar
!=
'_'
)
--
i
;
}
else
if
(
isdigit
(
nextChar
)
)
{
token
.
clear
(
)
;
token
+=
nextChar
;
++
i
;
nextChar
=
line
[
i
]
;
while
(
isdigit
(
nextChar
)
)
{
token
+=
nextChar
;
++
i
;
nextChar
=
line
[
i
]
;
}
if
(
!
isdigit
(
nextChar
)
)
--
i
;
std
:
:
cout
<<
token
<<
std
:
:
endl
;
l
[
"number"
]
++
;
}
else
if
(
nextChar
==
'\''
)
{
token
.
clear
(
)
;
token
+=
nextChar
;
i
++
;
nextChar
=
line
[
i
]
;
while
(
nextChar
!=
'\''
)
{
token
+=
nextChar
;
i
++
;
nextChar
=
line
[
i
]
;
}
token
+=
nextChar
;
if
(
token
.
size
(
)
>
6
)
{
std
:
:
cout
<<
"character constant : "
<<
token
<<
" too long on line "
<<
lineCount
<<
std
:
:
endl
;
}
else
{
std
:
:
cout
<<
token
<<
std
:
:
endl
;
l
[
"char"
]
++
;
}
}
else
{
token
.
clear
(
)
;
q
=
0
;
t
=
0
;
if
(
nextChar
==
'&'
&&
line
[
i
+
1
]
==
'&'
)
t
=
1
;
else
if
(
nextChar
==
'<'
&&
line
[
i
+
1
]
==
'<'
&&
line
[
i
+
2
]
==
'='
)
t
=
2
;
else
if
(
nextChar
==
'>'
&&
line
[
i
+
1
]
==
'>'
&&
line
[
i
+
2
]
==
'='
)
t
=
2
;
else
if
(
nextChar
==
'|'
&&
line
[
i
+
1
]
==
'|'
)
t
=
1
;
else
if
(
nextChar
==
'+'
&&
line
[
i
+
1
]
==
'+'
)
t
=
1
;
else
if
(
nextChar
==
'-'
&&
line
[
i
+
1
]
==
'-'
)
t
=
1
;
else
if
(
nextChar
==
'-'
&&
line
[
i
+
1
]
==
'>'
)
t
=
1
;
else
if
(
nextChar
==
'>'
&&
line
[
i
+
1
]
==
'>'
)
t
=
1
;
else
if
(
nextChar
==
'<'
&&
line
[
i
+
1
]
==
'<'
)
t
=
1
;
else
if
(
nextChar
==
'|'
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
if
(
nextChar
==
'^'
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
if
(
nextChar
==
'&'
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
if
(
nextChar
==
'+'
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
if
(
nextChar
==
'-'
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
if
(
nextChar
==
'%'
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
if
(
nextChar
==
'*'
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
if
(
nextChar
==
'/'
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
if
(
nextChar
==
'='
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
if
(
nextChar
==
'!'
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
if
(
nextChar
==
'>'
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
if
(
nextChar
==
'<'
&&
line
[
i
+
1
]
==
'='
)
t
=
1
;
else
{
for
(
int
z
=
0
;
z
<
sizeof
(
specChar
)
;
++
z
)
{
if
(
nextChar
==
specChar
[
z
]
)
{
token
+=
nextChar
;
l
[
token
]
++
;
std
:
:
cout
<<
token
<<
std
:
:
endl
;
q
=
1
;
}
}
}
if
(
t
==
1
)
{
token
+=
nextChar
;
token
+=
line
[
i
+
1
]
;
q
=
1
;
++
i
;
std
:
:
cout
<<
token
<<
std
:
:
endl
;
l
[
token
]
++
;
}
if
(
t
==
2
)
{
token
+=
nextChar
;
token
+=
line
[
i
+
1
]
;
token
+=
line
[
i
+
2
]
;
std
:
:
cout
<<
token
<<
std
:
:
endl
;
l
[
token
]
++
;
q
=
1
;
++
i
;
++
i
;
}
if
(
q
==
0
)
std
:
:
cout
<<
"illegal character: "
<<
line
[
i
]
<<
" on line "
<<
lineCount
<<
std
:
:
endl
;
}
}
++
lineCount
;
}
printf
(
"       token          count\n"
)
;
printf
(
"--------------------- -----\n"
)
;
const
int
MAX_LEXEME
=
100
;
for
(
int
i
=
1
;
i
<=
MAX_LEXEME
;
i
++
)
{
if
(
l
.
empty
(
)
)
break
;
int
max_value
=
0
;
int
str_value
=
0
;
std
:
:
string
max_word
=
""
;
std
:
:
string
word
=
""
;
std
:
:
map
<
std
:
:
string
,
int
>
:
:
iterator
it
=
l
.
begin
(
)
;
for
(
it
=
l
.
begin
(
)
;
it
!=
l
.
end
(
)
;
it
++
)
{
if
(
(
*
it
)
.
second
>
max_value
)
{
max_value
=
(
*
it
)
.
second
;
max_word
=
(
*
it
)
.
first
;
}
}
for
(
it
=
l
.
begin
(
)
;
it
!=
l
.
end
(
)
;
it
++
)
{
if
(
(
*
it
)
.
second
==
max_value
)
{
if
(
(
*
it
)
.
first
.
size
(
)
==
1
&&
static_cast
<
int
>
(
(
*
it
)
.
first
[
0
]
)
<
static_cast
<
int
>
(
max_word
[
0
]
)
)
{
max_word
=
(
*
it
)
.
first
;
max_value
=
(
*
it
)
.
second
;
}
}
}
for
(
it
=
l
.
begin
(
)
;
it
!=
l
.
end
(
)
;
it
++
)
{
if
(
(
*
it
)
.
second
==
max_value
)
{
if
(
(
*
it
)
.
first
.
size
(
)
>=
max_word
.
size
(
)
)
{
max_word
=
(
*
it
)
.
first
;
max_value
=
(
*
it
)
.
second
;
}
}
}
l
.
erase
(
max_word
)
;
std
:
:
cout
<<
std
:
:
setw
(
21
)
<<
max_word
<<
std
:
:
setw
(
6
)
<<
max_value
<<
std
:
:
endl
;
}
return
0
;
}

        token          count
---------------------  -----
                ident    585
                    ;    144
                    (    106
                    )    106
                 char    100
               number     97
                    =     73
                   ==     72
                    :     68
                    [     52
                    ]     52
                    ,     39
                    {     37
                    }     37
                    .     36
                    +     30
                   <<     29
                   &&     28
                   ++     26
                    <     19
                    >     17
                   +=     15
               string     13
                   ||     12
                    *     12
                   !=      6
                    !      3
                   --      2
                   <=      1
                   >=      1
                    -      1
