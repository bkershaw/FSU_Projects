include								include
<								<
stdio								stdio
.								.
h								h
>								>
include								include
<								<
string								string
.								.
h								h
>								>
include								include
<								<
string								string
>								>
include								include
<								<
iostream							iostream
>								>
include								include
<								<
iomanip								iomanip
>								>
include								include
<								<
stdlib								stdlib
.								.
h								h
>								>
include								include
<								<
ctype								ctype
.								.
h								h
>								>
include								include
<								<
map								map
>								>
include								include
<								<
set								set
>								>
int								int
main								main
(								(
)								)
{								{
std								std
:								:
:								:
pair								pair
<								<
std								std
:								:
:								:
string								string
,								,
int								int
>								>
e								e
;								;
std								std
:								:
:								:
map								map
<								<
std								std
:								:
:								:
string								string
,								,
int								int
,								,
std								std
:								:
:								:
greater								greater
<								<
std								std
:								:
:								:
string								string
>								>
>								>
l								l
;								;
int								int
t								t
=								=
0								0
;								;
int								int
s								s
=								=
0								0
;								;
int								int
d								d
=								=
0								0
;								;
int								int
c								c
=								=
0								0
;								;
int								int
n								n
=								=
0								0
;								;
int								int
lineCount							lineCount
=								=
1								1
;								;
int								int
character							character
=								=
0								0
;								;
int								int
string								string
=								=
0								0
;								;
int								int
q								q
=								=
0								0
;								;
int								int
sControl							sControl
=								=
0								0
;								;
int								int
comment								comment
=								=
0								0
;								;
int								int
ident								ident
=								=
0								0
;								;
int								int
number								number
=								=
0								0
;								;
char								char
line								line
[								[
250								250
]								]
=								=
{								{
0								0
}								}
;								;
char								char
nextChar							nextChar
;								;
char								char
lexeme								lexeme
;								;
int								int
tokencount							tokencount
;								;
char								char
specChar							specChar
[								[
]								]
=								=
{								{
'('								'('
,								,
')'								')'
,								,
','								','
,								,
'.'								'.'
,								,
':'								':'
,								,
';'								';'
,								,
'?'								'?'
,								,
'['								'['
,								,
']'								']'
,								,
'{'								'{'
,								,
'}'								'}'
,								,
'~'								'~'
,								,
'&'								'&'
,								,
'|'								'|'
,								,
'^'								'^'
,								,
'+'								'+'
,								,
'-'								'-'
,								,
'%'								'%'
,								,
'*'								'*'
,								,
'/'								'/'
,								,
'='								'='
,								,
'!'								'!'
,								,
'>'								'>'
,								,
'<'								'<'
}								}
;								;
char								char
subSpecChar							subSpecChar
[								[
]								]
=								=
{								{
'|'								'|'
,								,
'^'								'^'
,								,
'+'								'+'
,								,
'-'								'-'
,								,
'%'								'%'
,								,
'*'								'*'
,								,
'/'								'/'
,								,
'='								'='
,								,
'!'								'!'
,								,
'>'								'>'
,								,
'<'								'<'
}								}
;								;
std								std
:								:
:								:
string								string
token								token
=								=
""								""
;								;
while								while
(								(
fgets								fgets
(								(
line								line
,								,
250								250
,								,
stdin								stdin
)								)
)								)
{								{
for								for
(								(
int								int
i								i
=								=
0								0
;								;
i								i
<								<
strlen								strlen
(								(
line								line
)								)
-								-
1								1
;								;
i								i
++								++
)								)
{								{
nextChar							nextChar
=								=
line								line
[								[
i								i
]								]
;								;
if								if
(								(
nextChar							nextChar
==								==
'/'								'/'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'*'								'*'
||								||
comment								comment
==								==
1								1
||								||
nextChar							nextChar
==								==
'/'								'/'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'/'								'/'
)								)
{								{
if								if
(								(
nextChar							nextChar
==								==
'/'								'/'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'/'								'/'
)								)
{								{
while								while
(								(
i								i
<								<
250								250
)								)
++								++
i								i
;								;
}								}
else								else
{								{
comment								comment
=								=
1								1
;								;
token								token
.								.
clear								clear
(								(
)								)
;								;
}								}
if								if
(								(
nextChar							nextChar
==								==
'*'								'*'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'/'								'/'
)								)
{								{
comment								comment
=								=
0								0
;								;
++								++
i								i
;								;
}								}
}								}
else								else
if								if
(								(
nextChar							nextChar
==								==
'"'								'"'
||								||
sControl							sControl
==								==
1								1
)								)
{								{
if								if
(								(
sControl							sControl
==								==
0								0
)								)
token								token
.								.
clear								clear
(								(
)								)
;								;
sControl							sControl
=								=
0								0
;								;
token								token
+=								+=
nextChar							nextChar
;								;
++								++
i								i
;								;
nextChar							nextChar
=								=
line								line
[								[
i								i
]								]
;								;
while								while
(								(
nextChar							nextChar
!=								!=
'"'								'"'
||								||
nextChar							nextChar
==								==
'\n'								'\n'
)								)
{								{
token								token
+=								+=
nextChar							nextChar
;								;
++								++
i								i
;								;
nextChar							nextChar
=								=
line								line
[								[
i								i
]								]
;								;
}								}
if								if
(								(
nextChar							nextChar
==								==
'\n'								'\n'
)								)
{								{
sControl							sControl
=								=
1								1
;								;
break								break
;								;
}								}
token								token
+=								+=
nextChar							nextChar
;								;
std								std
:								:
:								:
cout								cout
<<								<<
token								token
<<								<<
std								std
:								:
:								:
endl								endl
;								;
l								l
[								[
"string"							"string"
]								]
++								++
;								;
}								}
else								else
if								if
(								(
nextChar							nextChar
==								==
' '								' '
||								||
nextChar							nextChar
==								==
'\n'								'\n'
||								||
nextChar							nextChar
==								==
'\t'								'\t'
)								)
{								{
token								token
.								.
clear								clear
(								(
)								)
;								;
}								}
else								else
if								if
(								(
isalpha								isalpha
(								(
nextChar							nextChar
)								)
||								||
nextChar							nextChar
==								==
'_'								'_'
)								)
{								{
token								token
.								.
clear								clear
(								(
)								)
;								;
while								while
(								(
isalpha								isalpha
(								(
nextChar							nextChar
)								)
||								||
isdigit								isdigit
(								(
nextChar							nextChar
)								)
||								||
nextChar							nextChar
==								==
'_'								'_'
)								)
{								{
token								token
+=								+=
nextChar							nextChar
;								;
++								++
i								i
;								;
nextChar							nextChar
=								=
line								line
[								[
i								i
]								]
;								;
}								}
std								std
:								:
:								:
cout								cout
<<								<<
token								token
<<								<<
std								std
:								:
:								:
endl								endl
;								;
l								l
[								[
"ident"								"ident"
]								]
++								++
;								;
if								if
(								(
!								!
isalpha								isalpha
(								(
nextChar							nextChar
)								)
||								||
!								!
isdigit								isdigit
(								(
nextChar							nextChar
)								)
||								||
nextChar							nextChar
!=								!=
'_'								'_'
)								)
--								--
i								i
;								;
}								}
else								else
if								if
(								(
isdigit								isdigit
(								(
nextChar							nextChar
)								)
)								)
{								{
token								token
.								.
clear								clear
(								(
)								)
;								;
token								token
+=								+=
nextChar							nextChar
;								;
++								++
i								i
;								;
nextChar							nextChar
=								=
line								line
[								[
i								i
]								]
;								;
while								while
(								(
isdigit								isdigit
(								(
nextChar							nextChar
)								)
)								)
{								{
token								token
+=								+=
nextChar							nextChar
;								;
++								++
i								i
;								;
nextChar							nextChar
=								=
line								line
[								[
i								i
]								]
;								;
}								}
if								if
(								(
!								!
isdigit								isdigit
(								(
nextChar							nextChar
)								)
)								)
--								--
i								i
;								;
std								std
:								:
:								:
cout								cout
<<								<<
token								token
<<								<<
std								std
:								:
:								:
endl								endl
;								;
l								l
[								[
"number"							"number"
]								]
++								++
;								;
}								}
else								else
if								if
(								(
nextChar							nextChar
==								==
'\''								'\''
)								)
{								{
token								token
.								.
clear								clear
(								(
)								)
;								;
token								token
+=								+=
nextChar							nextChar
;								;
i								i
++								++
;								;
nextChar							nextChar
=								=
line								line
[								[
i								i
]								]
;								;
while								while
(								(
nextChar							nextChar
!=								!=
'\''								'\''
)								)
{								{
token								token
+=								+=
nextChar							nextChar
;								;
i								i
++								++
;								;
nextChar							nextChar
=								=
line								line
[								[
i								i
]								]
;								;
if								if
(								(
nextChar							nextChar
==								==
'\''								'\''
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'\''								'\''
)								)
{								{
token								token
+=								+=
nextChar							nextChar
;								;
i								i
++								++
;								;
}								}
}								}
token								token
+=								+=
nextChar							nextChar
;								;
if								if
(								(
token								token
.								.
size								size
(								(
)								)
>								>
6								6
)								)
{								{
std								std
:								:
:								:
cerr								cerr
<<								<<
"character constant : "						"character constant : "
<<								<<
token								token
<<								<<
" too long on line "						" too long on line "
<<								<<
lineCount							lineCount
<<								<<
std								std
:								:
:								:
endl								endl
;								;
}								}
else								else
{								{
std								std
:								:
:								:
cout								cout
<<								<<
token								token
<<								<<
std								std
:								:
:								:
endl								endl
;								;
l								l
[								[
"char"								"char"
]								]
++								++
;								;
}								}
}								}
else								else
{								{
token								token
.								.
clear								clear
(								(
)								)
;								;
q								q
=								=
0								0
;								;
t								t
=								=
0								0
;								;
if								if
(								(
nextChar							nextChar
==								==
'&'								'&'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'&'								'&'
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'<'								'<'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'<'								'<'
&&								&&
line								line
[								[
i								i
+								+
2								2
]								]
==								==
'='								'='
)								)
t								t
=								=
2								2
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'>'								'>'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'>'								'>'
&&								&&
line								line
[								[
i								i
+								+
2								2
]								]
==								==
'='								'='
)								)
t								t
=								=
2								2
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'|'								'|'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'|'								'|'
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'+'								'+'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'+'								'+'
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'-'								'-'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'-'								'-'
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'-'								'-'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'>'								'>'
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'>'								'>'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'>'								'>'
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'<'								'<'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'<'								'<'
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'|'								'|'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'^'								'^'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'&'								'&'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'+'								'+'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'-'								'-'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'%'								'%'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'*'								'*'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'/'								'/'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'='								'='
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'!'								'!'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'>'								'>'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
if								if
(								(
nextChar							nextChar
==								==
'<'								'<'
&&								&&
line								line
[								[
i								i
+								+
1								1
]								]
==								==
'='								'='
)								)
t								t
=								=
1								1
;								;
else								else
{								{
for								for
(								(
int								int
z								z
=								=
0								0
;								;
z								z
<								<
sizeof								sizeof
(								(
specChar							specChar
)								)
;								;
++								++
z								z
)								)
{								{
if								if
(								(
nextChar							nextChar
==								==
specChar							specChar
[								[
z								z
]								]
)								)
{								{
token								token
+=								+=
nextChar							nextChar
;								;
l								l
[								[
token								token
]								]
++								++
;								;
std								std
:								:
:								:
cout								cout
<<								<<
token								token
<<								<<
std								std
:								:
:								:
endl								endl
;								;
q								q
=								=
1								1
;								;
}								}
}								}
}								}
if								if
(								(
t								t
==								==
1								1
)								)
{								{
token								token
+=								+=
nextChar							nextChar
;								;
token								token
+=								+=
line								line
[								[
i								i
+								+
1								1
]								]
;								;
q								q
=								=
1								1
;								;
++								++
i								i
;								;
std								std
:								:
:								:
cout								cout
<<								<<
token								token
<<								<<
std								std
:								:
:								:
endl								endl
;								;
l								l
[								[
token								token
]								]
++								++
;								;
}								}
if								if
(								(
t								t
==								==
2								2
)								)
{								{
token								token
+=								+=
nextChar							nextChar
;								;
token								token
+=								+=
line								line
[								[
i								i
+								+
1								1
]								]
;								;
token								token
+=								+=
line								line
[								[
i								i
+								+
2								2
]								]
;								;
std								std
:								:
:								:
cout								cout
<<								<<
token								token
<<								<<
std								std
:								:
:								:
endl								endl
;								;
l								l
[								[
token								token
]								]
++								++
;								;
q								q
=								=
1								1
;								;
++								++
i								i
;								;
++								++
i								i
;								;
}								}
if								if
(								(
q								q
==								==
0								0
)								)
std								std
:								:
:								:
cerr								cerr
<<								<<
"illegal character: "						"illegal character: "
<<								<<
line								line
[								[
i								i
]								]
<<								<<
" on line "							" on line "
<<								<<
lineCount							lineCount
<<								<<
std								std
:								:
:								:
endl								endl
;								;
}								}
}								}
++								++
lineCount							lineCount
;								;
}								}
std								std
:								:
:								:
cout								cout
<<								<<
std								std
:								:
:								:
endl								endl
;								;
printf								printf
(								(
"        token          count\n"				"        token          count\n"
)								)
;								;
printf								printf
(								(
"---------------------  -----\n"				"---------------------  -----\n"
)								)
;								;
const								const
int								int
MAX_LEXEME							MAX_LEXEME
=								=
100								100
;								;
for								for
(								(
int								int
i								i
=								=
1								1
;								;
i								i
<=								<=
MAX_LEXEME							MAX_LEXEME
;								;
i								i
++								++
)								)
{								{
if								if
(								(
l								l
.								.
empty								empty
(								(
)								)
)								)
break								break
;								;
int								int
max_value							max_value
=								=
0								0
;								;
int								int
str_value							str_value
=								=
0								0
;								;
std								std
:								:
:								:
string								string
max_word							max_word
=								=
""								""
;								;
std								std
:								:
:								:
string								string
word								word
=								=
""								""
;								;
std								std
:								:
:								:
map								map
<								<
std								std
:								:
:								:
string								string
,								,
int								int
>								>
:								:
:								:
iterator							iterator
it								it
=								=
l								l
.								.
begin								begin
(								(
)								)
;								;
for								for
(								(
it								it
=								=
l								l
.								.
begin								begin
(								(
)								)
;								;
it								it
!=								!=
l								l
.								.
end								end
(								(
)								)
;								;
it								it
++								++
)								)
{								{
if								if
(								(
(								(
*								*
it								it
)								)
.								.
second								second
>								>
max_value							max_value
)								)
{								{
max_value							max_value
=								=
(								(
*								*
it								it
)								)
.								.
second								second
;								;
max_word							max_word
=								=
(								(
*								*
it								it
)								)
.								.
first								first
;								;
}								}
}								}
for								for
(								(
it								it
=								=
l								l
.								.
begin								begin
(								(
)								)
;								;
it								it
!=								!=
l								l
.								.
end								end
(								(
)								)
;								;
it								it
++								++
)								)
{								{
if								if
(								(
(								(
*								*
it								it
)								)
.								.
second								second
==								==
max_value							max_value
)								)
{								{
if								if
(								(
(								(
*								*
it								it
)								)
.								.
first								first
.								.
size								size
(								(
)								)
==								==
1								1
&&								&&
static_cast							static_cast
<								<
int								int
>								>
(								(
(								(
*								*
it								it
)								)
.								.
first								first
[								[
0								0
]								]
)								)
<								<
static_cast							static_cast
<								<
int								int
>								>
(								(
max_word							max_word
[								[
0								0
]								]
)								)
)								)
{								{
max_word							max_word
=								=
(								(
*								*
it								it
)								)
.								.
first								first
;								;
max_value							max_value
=								=
(								(
*								*
it								it
)								)
.								.
second								second
;								;
}								}
}								}
}								}
for								for
(								(
it								it
=								=
l								l
.								.
begin								begin
(								(
)								)
;								;
it								it
!=								!=
l								l
.								.
end								end
(								(
)								)
;								;
it								it
++								++
)								)
{								{
if								if
(								(
(								(
*								*
it								it
)								)
.								.
second								second
==								==
max_value							max_value
)								)
{								{
if								if
(								(
(								(
*								*
it								it
)								)
.								.
first								first
.								.
size								size
(								(
)								)
>=								>=
max_word							max_word
.								.
size								size
(								(
)								)
)								)
{								{
max_word							max_word
=								=
(								(
*								*
it								it
)								)
.								.
first								first
;								;
max_value							max_value
=								=
(								(
*								*
it								it
)								)
.								.
second								second
;								;
}								}
}								}
}								}
l								l
.								.
erase								erase
(								(
max_word							max_word
)								)
;								;
std								std
:								:
:								:
cout								cout
<<								<<
std								std
:								:
:								:
setw								setw
(								(
21								21
)								)
<<								<<
max_word							max_word
<<								<<
std								std
:								:
:								:
setw								setw
(								(
7								7
)								)
<<								<<
max_value							max_value
<<								<<
std								std
:								:
:								:
endl								endl
;								;
}								}
return								return
0								0
;								;
}								}
							      <
        token          count					        token          count
---------------------  -----					---------------------  -----
                ident    595					                ident    595
                    ;    147					                    ;    147
                    (    107					                    (    107
                    )    107					                    )    107
                 char    101					                 char    101
               number     98					               number     98
                   ==     73					                   ==     73
                    =     73					                    =     73
                    :     72					                    :     72
                    [     53					                    [     53
                    ]     53					                    ]     53
                    ,     39					                    ,     39
                    {     38					                    {     38
                    }     38					                    }     38
                    .     36					                    .     36
                    +     31					                    +     31
                   <<     30					                   <<     30
                   &&     29					                   &&     29
                   ++     27					                   ++     27
                    <     19					                    <     19
                    >     17					                    >     17
                   +=     16					                   +=     16
               string     13					               string     13
                    *     12					                    *     12
                   ||     11					                   ||     11
                   !=      6					                   !=      6
                    !      3					                    !      3
                   --      2					                   --      2
                   <=      1					                   <=      1
                   >=      1					                   >=      1
                    -      1					                    -      1
